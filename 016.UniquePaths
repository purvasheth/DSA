#Question - https://leetcode.com/problems/unique-paths/
#Solution - https://www.geeksforgeeks.org/count-possible-paths-top-left-bottom-right-nxm-matrix/

class Solution:
    # Easy recursive solution, gives TLE
    # def uniquePaths(self, m: int, n: int) -> int:
    #     if m == 1 or n == 1:
    #         return 1
    #     return Solution().uniquePaths(m-1,n) + Solution().uniquePaths(m,n-1)
    
    def uniquePaths(self, m: int, n: int) -> int:
        #math approach - we need to cover n+m-2 blocks in every unique path including the final block
         #paths => n+m-2Cn-1 / n+m-2Cm-1
        
        def fact(n):
            f = 1
            for i in range(2,n+1):
                f = f*i
            return f
      
        return fact(n+m-2)//(fact(n-1)*fact(m-1))

        # DP Approach
        # Counts = [x[:] for x in [[1] * n] * m] 
        # for i in range(1,m):
        #     for j in range(1,n):
        #         Counts[i][j] = Counts[i-1][j] + Counts[i][j-1]
        # return Counts[m-1][n-1]   
        
        #Improved DP Approach
        # Counts = [1 for i in range(n)]
        # print(Counts)
        # for i in range(m-1):
        #     for j in range(1,n):
        #         Counts[j] = Counts[j] + Counts[j-1]
        #         print(Counts[j])
        # print(Counts)
        # return Counts[n-1]

def main():
    import sys
    import io
    def readlines():
        for line in io.TextIOWrapper(sys.stdin.buffer, encoding='utf-8'):
            yield line.strip('\n')

    lines = readlines()
    while True:
        try:
            line = next(lines)
            m = int(line);
            line = next(lines)
            n = int(line);
            
            ret = Solution().uniquePaths(m, n)

            out = str(ret);
            print(out)
        except StopIteration:
            break

if __name__ == '__main__':
    main()
